# core/testing/test_models.py
import unittest
from django.db import IntegrityError
from django.utils import timezone
from django.contrib.auth import get_user_model
from django.test import TestCase

from core.models import User, Teacher, Student

UserModel = get_user_model()


class UserModelTests(TestCase):
    def test_string_representation_shows_role(self):
        u = UserModel.objects.create_user("u1", password="x", role="admin")
        self.assertEqual(str(u), "u1 (admin)")

    def test_role_choices_only_allow_valid_values(self):
        with self.assertRaises(IntegrityError):
            # bypass ModelForm validation – insert invalid role directly
            UserModel.objects.create(username="bad", password="x", role="invalid")


class TeacherModelTests(TestCase):
    def setUp(self):
        self.u = UserModel.objects.create_user("teach", password="x", role="teacher")

    def test_teacher_str(self):
        self.u.first_name = "T"
        self.u.last_name = "One"
        self.u.save()
        t = Teacher.objects.create(
            user=self.u,
            phone="111",
            subject_specialization="Math",
            employee_id="E1",
            date_of_joining=timezone.now().date(),
            status="active",
        )
        self.assertEqual(str(t), "T One – Math")

    def test_employee_id_is_unique(self):
        Teacher.objects.create(
            user=self.u,
            phone="111",
            subject_specialization="Math",
            employee_id="E1",
            date_of_joining=timezone.now().date(),
            status="active",
        )
        u2 = UserModel.objects.create_user("teach2", password="x", role="teacher")
        with self.assertRaises(IntegrityError):
            Teacher.objects.create(
                user=u2,
                phone="222",
                subject_specialization="Sci",
                employee_id="E1",  # duplicate
                date_of_joining=timezone.now().date(),
                status="active",
            )


class StudentModelTests(TestCase):
    def setUp(self):
        teach_user = UserModel.objects.create_user("teach", password="x", role="teacher")
        self.teacher = Teacher.objects.create(
            user=teach_user,
            phone="555",
            subject_specialization="Sci",
            employee_id="T2",
            date_of_joining=timezone.now().date(),
            status="active",
        )

    def test_student_str_and_delete_cascades_user(self):
        stu_user = UserModel.objects.create_user("stud", password="x", role="student")
        stu_user.first_name = "S"
        stu_user.last_name = "One"
        stu_user.save()

        student = Student.objects.create(
            user=stu_user,
            phone="777",
            roll_number="R1",
            student_class="9-A",
            date_of_birth="2010-01-01",
            admission_date="2024-01-01",
            status="active",
            assigned_teacher=self.teacher,
        )
        self.assertEqual(str(student), "S One – R1")

        student.delete()
        # custom delete should also remove associated auth user
        self.assertFalse(UserModel.objects.filter(username="stud").exists())

    def test_roll_number_unique_constraint(self):
        u1 = UserModel.objects.create_user("s1", password="x", role="student")
        Student.objects.create(
            user=u1,
            phone="1",
            roll_number="R2",
            student_class="9",
            date_of_birth="2010-01-01",
            admission_date="2024-01-01",
            status="active",
            assigned_teacher=self.teacher,
        )
        u2 = UserModel.objects.create_user("s2", password="x", role="student")
        with self.assertRaises(IntegrityError):
            Student.objects.create(
                user=u2,
                phone="2",
                roll_number="R2",  # duplicate roll number
                student_class="9",
                date_of_birth="2010-01-01",
                admission_date="2024-01-01",
                status="active",
                assigned_teacher=self.teacher,
            )
